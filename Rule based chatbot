# import libraries

# RE is the Regular Expression that helps in to find the patterns of words or sequence.
import re
import long_response as long

# function that calculate the probability of the messages
def msg_prob(user_msg, recognised_words, single_response=False, required_words=[]):
    msg_certainty = 0
    has_required_words = True

    # Counts how many words are present in each predefined message
    for word in user_msg:
        if word in recognised_words:
            msg_certainty += 1                                                 # increment by one for more accurate the sentence

    # Calculates the percent of recognised words in a user message
    percentage = float(msg_certainty) / float(len(recognised_words))

    # Checks that the required words are in the string
    for word in required_words:
        if word not in user_msg:
            has_required_words = False
            break

    # Must either have the required words, or be a single response
    if has_required_words or single_response:
        return int(percentage * 100)
    else:
        return 0

# check all messages and create a empty dictionary
def check_all_msgs(msg):
    highest_prob_list = {}

    # Simplifies response creation / adds it to the dictionary
    def response(bot_response, list_of_words, single_response=False, required_words=[]):
        nonlocal highest_prob_list
        highest_prob_list[bot_response] = msg_prob(msg, list_of_words, single_response, required_words)

    # Responses ------------------
    response('Hey!', ['hello', 'hi', 'hey', 'heyaa', 'hie'], single_response=True)
    response('See you!', ['bye','bie', 'goodbye'], single_response=True)
    response('I\'m doing fine, and Wbu?', ['how', 'are', 'you', 'doing'], required_words=['how'])
    response('You\'re welcome!', ['thnx', 'thanks'], single_response=True)
    response('Thank you!', ['i', 'like', 'that', 'information'], required_words=['like', 'information'])
    response('10am to 5pm',['what','is','the','time'],required_words=['time'])

    # Longer responses
    response(long.R_ADVICE, ['give', 'advice'], required_words=['advice'])
    response(long.R_EATING, ['what', 'you', 'eat'], required_words=['you', 'eat'])

    best_match = max(highest_prob_list, key=highest_prob_list.get)
    
    # return the long_response value
    return long.unknown() if highest_prob_list[best_match] < 1 else best_match


# Used to get the response
# take the user input
# we can split message into array , so we can easily analyze each word separately from the user message.
def get_response(user_input):
    split_msg = re.split(r'\s+|[,;?!.-]\s*', user_input.lower())          # remove all the symbols and take input in lowercase
    response = check_all_msgs(split_msg)                                  # check all the messages
    return response


# Testing the response system
# use while loop to get always new responses
while True:
    print('Bot: ' + get_response(input('You: ')))
